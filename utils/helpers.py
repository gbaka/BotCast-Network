from errors.custom_errors import CommandArgumentError, CommandExecutionError
from pyrogram import errors, client, types
import re
from fuzzywuzzy import fuzz, process
import config
import datetime
from pyrogram.enums import ChatType, ChatMemberStatus
from database import models
"""
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö
—á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞.

"""


def extract_wait_time(error_message: str) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ FloodWait
    –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω–∞.
    """
    match = re.search(r'A wait of (\d+) seconds',
                      error_message)
    if match:
        wait_time_seconds = int(match.group(1))
        return wait_time_seconds


def validate_arguments_against_patterns(args_list, type_patterns):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ 
    –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞–º, —É–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ.
     
    –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–µ—Ç —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π
    —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    
    –ï—Å–ª–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ type_patterns –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–∏–ø —ç–ª–ª–∏–ø—Å–∏—Å (...), 
    –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã.

    –§–æ—Ä–º–∞—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞: —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç–∏–ø–æ–≤ int, str –∏–ª–∏ Ellipsis. –¢–∞–∫ –∂–µ 
    —Ç–∞–º –º–æ–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ñ–ª–∞–≥. –ù–∞–ø—Ä–∏–º–µ—Ä "-all".
    """
    for pattern in type_patterns:
        continue_outer_loop = False
        if len(args_list) < len(pattern):    # –Ω–µ –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–∏—Ö —Å—Ç—Ä–æ—á–∫–∞—Ö, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è —É–±—Ä–∞—Ç—å
            continue                         #
        if len(args_list) != len(pattern) and Ellipsis not in pattern:
            continue
        for i in range(len(pattern)):
            if isinstance(pattern[i], str):
                flag = pattern[i]
                if flag != args_list[i].lower():   # –≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–ª–∞–≥ –Ω–µ—á—É—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                    continue_outer_loop = True
                    break
            else:
                _type = pattern[i]
                if _type == Ellipsis:
                    return pattern
                try:
                    _type(args_list[i])
                except (TypeError, ValueError, IndexError):  # –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
                    continue_outer_loop = True               # —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤–µ—Ä–∫–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 
                    break
        if not continue_outer_loop:
            return pattern
    raise CommandArgumentError(
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."
    )
    

def remove_newline_from_strings(string_list):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —É –≤—Å–µ—Ö —ç–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∏
    –µ—Å–ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π - —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
    """
    cleaned_list = [string.replace('\n', '') for string in string_list]
    cleaned_list = [string for string in cleaned_list if string != ""]
    return cleaned_list


def remove_first_word(text):
    # pattern = r'^\s*\S+'
    pattern = r'^\s*\S+\s*'
    match = re.search(pattern, text)
    if match:
        result_text = text[match.end():]  # match.end() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        return result_text
    else:
        return text
    

def truncate_string(input_string, n):
    if len(input_string) <= n:
        return input_string
    else:
        return input_string[:n] + "..."
    

def is_valid_command(string):
    if len(string) > 0:
        return string[0] == "/"
    return False


def find_closest_command(existing_commands : list, user_input : str) -> str | None:
    closest_match = process.extractOne(user_input, existing_commands, scorer=fuzz.ratio)

    if closest_match[1] >= config.WORD_SIMILARITY_THRESHOLD: # –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ 
        return closest_match[0]
    else:
        return None 
    

def create_history_page(page : int, records : list[str]) -> str:
    if len(records) == 0:
        if page == 1:
            history_page = "üìÇ **–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞.**"
        else:
            history_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞.**"
    else:
        history_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:**\n\n"
        remark = (
            '__* –í—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:__\n'
            '`/history clear`'
        )
        for record in records:
            history_page += str(record) + "\n\n"
        history_page += remark
    return history_page


def create_texts_page(page : int, texts : list[str]) -> str:
    if len(texts) == 0:
        if page == 1:
            texts_page = "üìÇ **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç.**"
        else:
            texts_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.**"
    else:
        texts_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤:**\n\n"
        remark = (
             "* __–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:__\n"
             "`/texts del`\n"
             "`/texts clear`"
        )
        for text in texts:

            _text = text if len(text)<60 else text[:60] + "..."
            _text = _text + "\""
            texts_page += _text + "\n\n"
        texts_page += remark
    return texts_page


def create_chats_page(page : int, chats : list[str]) -> str:
    if len(chats) == 0:
        if page == 1:
            chats_page = "üìÇ **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.**"
        else:
            chats_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.**"
    else:
        chats_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–∞—Ç–æ–≤:**\n\n"
        remark = (
             "* __–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á–∞—Ç—ã –ø–æ ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:__\n"
             "`/chats del`\n"
             "`/chats clear`"
        )
        for chat in chats:
            chats_page += str(chat) + "\n\n"
        chats_page += remark
    return chats_page


def trim_history_records(records: list[str]) -> list[str]:
    trimmed_records = []
    for record in records:
        trimmed_records.append("\n".join(record.split('\n')[0:3]))
    return trimmed_records


def url_to_chatname(url):
    url = "@" + url.replace("https://t.me/", "").replace("t.me/", "")
    return url


def is_valid_telegram_url(url):
    pattern = r"^(https://t\.me/|t\.me/)[a-zA-Z0-9_]+$"
    if re.match(pattern, url):
        return True
    else:
        return False
    

def render_chat_info(chat_details):
    # TODO: –¥–æ–¥–µ–ª–∞—Ç—å, –¥–æ–ø–æ–ª–Ω–∏—Ç—å –∏–Ω—Ñ—É
    title = "üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ:**\n\n"

    chat_id = chat_details['id'] if chat_details['id'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    is_bot_in_chat = "–¥–∞" if chat_details['is_participant'] else "–Ω–µ—Ç"

    info = (f"__–ù–∞–∑–≤–∞–Ω–∏–µ:__  {chat_details['title']}\n" +
            f"__ID —á–∞—Ç–∞:__  {chat_id}\n" +
            f"__–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:__  {chat_details['members_count']}\n" + 
            f"__–°–æ—Å—Ç–æ–∏—Ç –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ:__  {is_bot_in_chat}\n" + 
            f"__–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:__  {chat_details['chat_link']}")
            
    return title + info

# def convert_to_unix_timestamp(time_str):
#     datetime_obj = datetime.strptime(time_str, "%d.%m.%Y %H:%M:%S")
#     timestamp = datetime_obj.timestamp() 
#     return int(timestamp) 


def extract_username_from_link(chat_link: str):
    regex_pattern = r"https://(?:t|telegram)\.(?:me|dog)/(joinchat/|\+)?([\w-]+)"
    match = re.search(regex_pattern, chat_link)
    if match:
        return match.group(2)
    else:
        raise CommandArgumentError("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
    


# TODO: –¥–æ–¥–µ–ª–∞—Ç—å
def create_deleted_chats_report(deleted_chats: list[models.Chat]):
    
    report = ""
    for chat in deleted_chats:
        report += f"__–ù–∞–∑–≤–∞–Ω–∏–µ:__  {chat.name}\n"
        report += f"__ID —á–∞—Ç–∞:__  {chat.chat_id}\n\n"

    remark = "__* –ï—Å–ª–∏ –≤—ã –≤—Å—ë –∂–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.__"
    return report + remark
    # info = (f"__–Ω–∞–∑–≤–∞–Ω–∏–µ:__  {chat_obj.title}\n" +
    #          f"__ID —á–∞—Ç–∞:__  {chat_obj.id}\n" +
    #          f"__–∫–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:__ {chat_obj.members_count}")
            

