
from pyrogram import types, errors
from errors.custom_errors import CommandArgumentError
import re
from fuzzywuzzy import fuzz, process
import config
import datetime
from utils import helpers
from math import ceil

"""
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ —Ä–∞–∑–Ω—ã—Ö
—á–∞—Å—Ç—è—Ö –ø—Ä–æ–µ–∫—Ç–∞.

"""


def extract_wait_time(error_message: str) -> int:
    """
    –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ FloodWait
    –∫–æ–ª-–≤–æ —Å–µ–∫—É–Ω–¥ –∫—É–ª–¥–∞—É–Ω–∞.
    """
    match = re.search(r'A wait of (\d+) seconds',
                      error_message)
    if match:
        wait_time_seconds = int(match.group(1))
        return wait_time_seconds


def validate_arguments_against_patterns(args_list, type_patterns):
    """
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –ª–∏ –ø—Ä–∏–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ 
    –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–∞–º, —É–∫–∞–∑—ã–≤–∞–µ–º—ã—Ö –≤ –ø–∞—Ç—Ç–µ—Ä–Ω–µ.
     
    –ù–∞ –≤—Ö–æ–¥ —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–∞–µ—Ç —Å—Ä–∞–∑—É —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–µ—Ç —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π
    —É–¥–æ–≤–ª–µ—Ç–æ–≤—Ä—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º - –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤–æ–∑–±—É–∂–¥–∞–µ—Ç—Å—è –∏—Å–∫–ª—é—á–µ–Ω–∏–µ.
    
    –ï—Å–ª–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –≤ pattern'–µ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è —Ç–∏–ø —ç–ª–ª–∏–ø—Å–∏—Å (...), 
    –∑–Ω–∞—á–∏—Ç –≤—Å–µ –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ–∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤–∞–ª–∏–¥–Ω—ã.

    –§–æ—Ä–º–∞—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞: —ç—Ç–æ –∫–æ—Ä—Ç–µ–∂ –∏–∑ —Ç–∏–ø–æ–≤ int, str –∏–ª–∏ Ellipsis. –¢–∞–∫ –∂–µ 
    —Ç–∞–º –º–æ–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∞—è –Ω–µ–∫–æ—Ç–æ—Ä—ã–π —Ñ–ª–∞–≥. –ù–∞–ø—Ä–∏–º–µ—Ä "-all". 
    –¢–∞–∫ –∂–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è —Å–ø–∏—Å–æ–∫, –≤–Ω—É—Ç—Ä–∏ –Ω–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Ç–∏–ø—ã –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è 
    –∞—Ä–≥—É–º–µ–Ω—Ç–∞.
    """
    for pattern in type_patterns:
        continue_outer_loop = False
        if len(args_list) < len(pattern):    # –Ω–µ –æ—á–µ–Ω—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–∏—Ö —Å—Ç—Ä–æ—á–∫–∞—Ö, –≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è —É–±—Ä–∞—Ç—å
            continue                         #
        if len(args_list) != len(pattern) and Ellipsis not in pattern:
            continue

        for i in range(len(pattern)):
            if isinstance(pattern[i], str):
                flag = pattern[i]
                if flag.lower() != args_list[i].lower():   # –≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ñ–ª–∞–≥ –Ω–µ—á—É—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É
                    continue_outer_loop = True
                    break

            elif isinstance(pattern[i], list):
                is_match = False
                for template in pattern[i]:
                    if isinstance(template, str):  # flag
                        flag = template
                        if flag==args_list[i].lower():
                            is_match = True
                            break
                    else:                           # type
                        _type = template
                        if _type == Ellipsis:
                            return pattern
                        try:
                            _type(args_list[i])
                            is_match = True
                            break
                        except (TypeError, ValueError, IndexError): 
                            pass
                if not is_match:
                    continue_outer_loop = True
                    break
                    
            else:
                _type = pattern[i]
                if _type == Ellipsis:
                    return pattern
                try:
                    _type(args_list[i])
                except (TypeError, ValueError, IndexError):  # –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞ –∏–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –º–µ–Ω—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏
                    continue_outer_loop = True               # —Å –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–≤–µ—Ä–∫–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–æ–º 
                    break

        if not continue_outer_loop:
            return pattern
        
    raise CommandArgumentError(
        "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ç–∏–ø—ã –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤."
    )
    

def remove_newline_from_strings(string_list):
    """
    —Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª—è–µ—Ç —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ —É –≤—Å–µ—Ö —ç–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞, –∏
    –µ—Å–ª–∏ —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π - —É–¥–∞–ª—è–µ—Ç –µ–≥–æ.
    """
    cleaned_list = [string.replace('\n', '') for string in string_list]
    cleaned_list = [string for string in cleaned_list if string != ""]
    return cleaned_list


def remove_first_word(text):
    pattern = r'^\s*\S+\s*'
    match = re.search(pattern, text)
    if match:
        result_text = text[match.end():]  # match.end() - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –∫–æ–Ω—Ü–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        return result_text
    else:
        return text
    

def remove_first_n_words(text, n):
    for _ in range(n):
        text = remove_first_word(text)
    return text
    
    
def truncate_string(input_string, n):
    if len(input_string) <= n:
        return input_string
    else:
        return input_string[:n] + "..."
    

def is_valid_command(string):
    if len(string) > 0:
        return string[0] == "/"
    return False


def find_closest_command(existing_commands : list, user_input : str) -> str | None:
    closest_match = process.extractOne(user_input, existing_commands, scorer=fuzz.ratio)

    if closest_match[1] >= config.WORD_SIMILARITY_THRESHOLD: # –ø–æ—Ä–æ–≥ —Å—Ö–æ–¥—Å—Ç–≤–∞ 
        return closest_match[0]
    else:
        return None 
    

def create_history_page(page : int, records : list[str], records_count) -> str:
    if len(records) == 0:
        if page == 1:
            history_page = "üìÇ **–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞.**"
        else:
            history_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥ –ø—É—Å—Ç–∞.**"
            history_page += (f"–í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ __**{records_count}**__ –∑–∞–ø–∏—Å–µ–π –∏ __**{ceil(records_count/config.HISTORY_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n"
                             f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥: __**{config.HISTORY_CAPACITY}**__ –∑–∞–ø–∏—Å–µ–π.\n\n")
    else:
        history_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥:**\n\n"
        history_page += (f"–í—Å–µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏–∏ __**{records_count}**__ –∑–∞–ø–∏—Å–µ–π –∏ __**{ceil(records_count/config.HISTORY_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n"
                             f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–º–∞–Ω–¥: __**{config.HISTORY_CAPACITY}**__ –∑–∞–ø–∏—Å–µ–π.\n\n")
        remark = (
            '__* –í—ã –º–æ–∂–µ—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:__\n'
            '`/history clear`'
        )
        for record in records:
            history_page += str(record) + "\n\n"
        history_page += remark
    return history_page


def create_texts_page(page : int, texts : list[str], text_count : int) -> str:
    if len(texts) == 0:
        if page == 1:
            texts_page = "üìÇ **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç.**"
        else:
            texts_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç–∞.**\n\n"
            texts_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{text_count}**__ —Ç–µ–∫—Å—Ç–æ–≤ –∏ __**{ceil(text_count/config.TEXTS_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
    else:
        texts_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —Ç–µ–∫—Å—Ç–æ–≤:**\n\n"
        texts_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{text_count}**__ —Ç–µ–∫—Å—Ç–æ–≤ –∏ __**{ceil(text_count/config.TEXTS_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
        remark = (
             "* __–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —Ç–µ–∫—Å—Ç—ã –ø–æ ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:__\n"
             "`/texts del`\n"
             "`/texts clear`"
        )
        for text in texts:
            _text = text if len(text) < config.PREVIEW_TEXT_LENGTH else text[:config.PREVIEW_TEXT_LENGTH] + "..."
            _text = _text + "\""
            texts_page += _text + "\n\n"
        texts_page += remark
    return texts_page


def create_chats_page(page : int, chats : list[str], chat_count : int) -> str:
    if len(chats) == 0:
        if page == 1:
            chats_page = "üìÇ **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ –ø—É—Å—Ç.**"
        else:
            chats_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–∞—Ç–æ–≤ –ø—É—Å—Ç–∞.**\n\n"
            chats_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{chat_count}**__ —á–∞—Ç–æ–≤ –∏ __**{ceil(chat_count/config.CHATS_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
    else:
        chats_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–∞—Ç–æ–≤:**\n\n"
        chats_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{chat_count}**__ —á–∞—Ç–æ–≤ –∏ __**{ceil(chat_count/config.CHATS_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
        remark = (
             "* __–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å —á–∞—Ç—ã –ø–æ ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:__\n"
             "`/chats del`\n"
             "`/chats clear`"
        )
        for chat in chats:
            chats_page += str(chat) + "\n\n"
        chats_page += remark
    return chats_page


def trim_history_records(records: list[str]) -> list[str]:
    trimmed_records = []
    for record in records:
        trimmed_records.append("\n".join(record.split('\n')[0:3]))
    return trimmed_records


def url_to_chatname(url):
    url = "@" + url.replace("https://t.me/", "").replace("t.me/", "")
    return url


def is_valid_telegram_url(url):
    pattern = r"^(https://t\.me/|t\.me/)[a-zA-Z0-9_]+$"
    if re.match(pattern, url):
        return True
    else:
        return False
    

def render_chat_info(chat_details):
    title = "üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º —á–∞—Ç–µ:**\n\n"

    chat_id = chat_details['id'] if chat_details['id'] else "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    is_bot_in_chat = "–¥–∞" if chat_details['is_participant'] else "–Ω–µ—Ç"

    try:
        int(chat_details['chat_link'])
        chat_link = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    except ValueError:
        chat_link = chat_details['chat_link']

    info = (f"__**–ù–∞–∑–≤–∞–Ω–∏–µ:**__  {chat_details['title']}\n" +
            f"__**ID —á–∞—Ç–∞:**__  `{chat_id}`\n" +
            f"__**–ö–æ–ª-–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:**__  {chat_details['members_count']}\n" + 
            f"__**–°–æ—Å—Ç–æ–∏—Ç –ª–∏ –±–æ—Ç –≤ —á–∞—Ç–µ:**__  {is_bot_in_chat}\n" + 
            f"__**–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç:**__  {chat_link}")
            
    return title + info


def extract_username_from_link(chat_link: str):
    regex_pattern = r"https://(?:t|telegram)\.(?:me|dog)/(joinchat/|\+)?([\w-]+)"
    match = re.search(regex_pattern, chat_link)
    if match:
        return match.group(2)
    else:
        raise CommandArgumentError("–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.") 
    

def convert_link_to_username(chat_link: str) -> str:
    regex_pattern = r"(?:https:\/\/)?(?:t|telegram)\.(?:me|dog)/([\w]+)"
    match = re.search(regex_pattern, chat_link)
    if match:
        return match.group(1)
    return chat_link


# TODO: –¥–æ–¥–µ–ª–∞—Ç—å
def create_deleted_chats_report(deleted_chats):   
    report = ""
    for chat in deleted_chats:
        report += f"__**–ù–∞–∑–≤–∞–Ω–∏–µ:**__  {chat.name}\n"
        report += f"__**ID —á–∞—Ç–∞:**__  `{chat.chat_id}`\n\n"

    remark = "__* –ï—Å–ª–∏ –≤—ã –≤—Å—ë –∂–µ —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É - –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.__"
    return report + remark


def create_delayed_messages_report(message_sending_info: list[dict], initial_schedule_date: datetime.datetime, time_difference: int, all_messages_sent: bool):
    if all_messages_sent:
        title = "‚úÖ **–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã:**\n\n"
    else: 
        title = ("‚ö†Ô∏è **–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ Telegram API.**\n" + 
                 "–ù–µ –≤—Å–µ –∏–∑ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã.\n\n")
    general = (f"__**–ù–∞—á–∞–ª–æ —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:**__\n{initial_schedule_date.strftime('%d.%m.%Y %H:%M:%S')}\n" +
               f"__**–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:**__\n{time_difference} –º–∏–Ω.\n\n")
    info = "__**–ß–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**__\n"  
    for indx, info_dict in enumerate(message_sending_info, start = 1):
        info += (f"__**–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:**__  {info_dict['chat_title']}\n" +
                 f"__**ID —á–∞—Ç–∞:**__  `{info_dict['chat_id']}`\n" +
                 f"__**–ù–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:**__  {info_dict['messages_amount']}\n" +
                 f"__**–ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:**__  {info_dict['end_of_sending'].strftime('%d.%m.%Y %H:%M:%S')}\n\n")
        if indx > config.MAX_DELAYED_MESSAGES_PER_CHAT:
            info += f"–ê —Ç–∞–∫–∂–µ –µ—â–µ {len(message_sending_info) - indx} —á–∞—Ç–æ–≤.\n\n"
    return title + general + info[:-2]


def render_messages_info(chat_messages_tuples: list[tuple]) -> str: 
    total_messages = 0
    info = ""
    for chat_message_tuple in chat_messages_tuples:
        chat_title = chat_message_tuple[3]
        stop_date = chat_message_tuple[2]
        messages_amount = chat_message_tuple[1]
        chat_id = chat_message_tuple[0]
        info += f"__**–í–Ω–∏–º–∞–µ–Ω–∏–µ, –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.**__\n" if chat_title == None else f"__**–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:**__  {chat_title}\n"
        info += (f"__**ID —á–∞—Ç–∞:**__  `{chat_id}`\n" +
                 f"__**–ö–æ–ª-–≤–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:**__  {messages_amount}\n"
                 f"__**–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ü–∏–∫–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:**__\n{stop_date.strftime('%d.%m.%Y %H:%M:%S')}\n\n")
        total_messages += messages_amount
    
    title = "üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–∏—Ö –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö:**\n\n"
    if len(chat_messages_tuples)==1:
        total = ""    
    else:
        total = f"__**–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:**__  {total_messages}\n\n"
    
    remark = "__* –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:__\n`/messages undo`"
    return title + info + total + remark


def create_autoposting_start_report(chat_objs, texts, delay : datetime.timedelta) -> str:
    title = "‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω:**\n\n"
    if len(texts)>1:
        general = "__**–î–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –∏–∑ –±–∞–∑—ã.**__\n\n"        
    else:
        text_id = texts[0].text_id
        general = f"__**–î–ª—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Å ID {text_id}.**__\n"
    general += f"__**–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:**__  {int(delay.total_seconds() / 60)} –º–∏–Ω.\n\n"
    info = "__**–ß–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**__\n"
    for indx, chat_obj in enumerate(chat_objs, start=1):
        chat_id = chat_obj.chat_id
        chat_title = chat_obj.name
        if indx > config.AUTOPOST_START_REPORT_CAPACITY:
            info += f"–ê —Ç–∞–∫–∂–µ –µ—â–µ {len(chat_objs) - indx + 1} —á–∞—Ç–æ–≤.\n\n"
            break
        info += (f"__**–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:**__  {chat_title}\n" +
                 f"__**ID —á–∞—Ç–∞:**__  `{chat_id}`\n\n")
        
    return title + general + info[:-2]


def create_autoposting_status_report(status : dict):
    if status["has_error"]:
        title =  "‚ö†Ô∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω, –Ω–æ –≤–æ –≤—Ä–µ–º—è –ø–æ—Å—Ç–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –æ—à–∏–±–∫–∏:**\n\n"
    else: 
        title = "üìù **–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω:**\n\n"
        
    general = (f"__**–ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –ø–æ {status['chat_amount']} —á–∞—Ç–∞–º.**__\n" +
               f"__**–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏:**__  {int(status['delay'].total_seconds() / 60)} –º–∏–Ω.\n"
               f"__**–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {status['total_posts']} —Å–æ–æ–±—â–µ–Ω–∏–π.**__\n" +
               f"__**–í –ø–æ—Å—Ç–∏–Ω–≥–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è {status['text_amount']} —Ç–µ–∫—Å—Ç–æ–≤.**__\n\n")
    
    info = "__**–ß–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**__\n"
    for indx, chat_id in enumerate(status['chats_info'], start = 1):
        chat_title = status['chats_info'][chat_id]['chat_title']
        message_amount = status['chats_info'][chat_id]['post_amount']

        if indx > config.AUTOPOST_STATUS_REPORT_CAPACITY:
            info += f"–ê —Ç–∞–∫–∂–µ –µ—â–µ {status['chat_amount'] - indx + 1} —á–∞—Ç–æ–≤.\n\n"
            break

        info += (f"__**–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:**__  {chat_title}\n" + 
                 f"__**ID —á–∞—Ç–∞:**__  `{chat_id}`\n" + 
                 f"__**–û—Ç–ø—Ä–∞–≤–µ–ª–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:**__  {message_amount} —à—Ç.\n\n") 
    
    return title + general + info[:-2]


def create_autoposting_end_report(status : dict):
    if status["has_error"]:
        title = "‚ö†Ô∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏:**\n\n"
        title += "–í–æ–∑–º–æ–∂–Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ—Å—Ç–∏–Ω–≥–∞ –±–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤.\n\n"
    else: 
        title = "‚úÖ **–ê–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω**\n\n"

    general = (f"__**–ü–æ—Å—Ç–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏–ª—Å—è –ø–æ {status['chat_amount']} —á–∞—Ç–∞–º.**__\n" +
               f"__**–í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {status['total_posts']} —Å–æ–æ–±—â–µ–Ω–∏–π.**__\n" +
               f"__**–í –ø–æ—Å—Ç–∏–Ω–≥–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å {status['text_amount']} —Ç–µ–∫—Å—Ç–æ–≤.**__\n\n")
    
    info = "__**–ß–∞—Ç—ã –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è:**__\n"
    for indx, chat_id in enumerate(status['chats_info'], start = 1):
        chat_title = status['chats_info'][chat_id]['chat_title']
        message_amount = status['chats_info'][chat_id]['post_amount']

        if indx > config.AUTOPOST_END_REPORT_CAPACITY:
            info += f"–ê —Ç–∞–∫–∂–µ –µ—â–µ {status['chat_amount'] - indx + 1} —á–∞—Ç–æ–≤.\n\n"
            break

        info += (f"__**–ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞:**__  {chat_title}\n" + 
                 f"__**ID —á–∞—Ç–∞:**__  `{chat_id}`\n" + 
                 f"__**–û—Ç–ø—Ä–∞–≤–µ–ª–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:**__  {message_amount} —à—Ç.\n\n") 
    
    return title + general + info[:-2]


def create_notes_page(page : int, notes : list[str], note_count : int) -> str:
    if len(notes) == 0:
        if page == 1:
            notes_page = "üìÇ **–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç.**"
        else:
            notes_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–º–µ—Ç–æ–∫ –ø—É—Å—Ç–∞.**\n\n"
            notes_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{note_count}**__ –∑–∞–º–µ—Ç–æ–∫ –∏ __**{ceil(note_count/config.NOTES_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
    else:
        notes_page = f"üìî **{page}-–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∑–∞–º–µ—Ç–æ–∫:**\n\n"
        notes_page += f"–í—Å–µ–≥–æ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ __**{note_count}**__ –∑–∞–º–µ—Ç–æ–∫ –∏ __**{ceil(note_count/config.NOTES_PAGE_CAPACITY)}**__ –Ω–µ–ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü.\n\n"
        remark = (
             "* __–í—ã –º–æ–∂–µ—Ç–µ —É–¥–∞–ª—è—Ç—å –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID –∏–ª–∏ —Å—Ä–∞–∑—É –æ—á–∏—Å—Ç–∏—Ç—å –≤–µ—Å—å –∫–∞—Ç–∞–ª–æ–≥ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥:__\n"
             "`/notes del`\n"
             "`/notes clear`"
        )
        for note in notes:
            notes_page += note + "\n\n"
        notes_page += remark
    return notes_page


def create_moved_users_report(status : dict) -> str: 
    added_user_count = len(status["added_users"])
    expected_added_user_count = status["expected_added_user_count"]

    if added_user_count == expected_added_user_count: 
        title = f"‚úÖ **–í —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_user_count}/{expected_added_user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.**\n\n"
        title += f"–ë–æ—Ç —Å–º–æ–≥ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–π –∏–∑ –æ–¥–Ω–æ–≥–æ —á–∞—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.\n\n"
    else: 
        title = f"‚ö†Ô∏è **–í —Ü–µ–ª–µ–≤–æ–π —á–∞—Ç –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {added_user_count}/{expected_added_user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.**\n\n"
        title += f"–ë–æ—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º–æ–µ —á–∏—Å–ª–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –±—ã–ª–æ –≤ —á–∞—Ç–µ.\n\n"
    
    error_info = "" 
    error = status["error"]
    print(error, type(error))
    if isinstance(error, errors.exceptions.flood_420.FloodWait):
        error_info += ("–í –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–∞–±–æ—Ç—ã –≤–æ–∑–Ω–∏–∫–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:\n\n"
                       "‚öôÔ∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API.**\n–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å "
                        f"{helpers.extract_wait_time(str(error))} —Å–µ–∫—É–Ω–¥.\n\n")
        
    info = ""
    if added_user_count > 0:
        info += f"–ò–∑ —á–∞—Ç–∞ —Å ID {status['source_chat_id']} –≤ —á–∞—Ç —Å ID {status['target_chat_id']} –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" 

        for indx, user in enumerate(status['added_users'], start=1):
            info += (f"__**–ò–º—è:**__  {user.first_name}\n"
                    f"__**ID:**__  {user.id}\n\n")
            if indx == config.MOVE_USERS_REPORT_CAPACITY:
                title += f"–ê —Ç–∞–∫–∂–µ –µ—â–µ {len(status['added_users'] - indx)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π."
                break
            
    return title + error_info + info


def render_user_info(user_obj : types.User): 

    def convert_none(arg):
        if arg is None: 
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–≤–Ω–æ"
        return arg
        
    def convert_bool(arg : bool):
        if arg:
            return "–î–∞"
        elif arg is None:
            return "–ù–µ–∏–∑–≤–µ—Å—Ç–≤–Ω–æ"
        return "–ù–µ—Ç"
    
    def convert_datetime(arg : [datetime.datetime | None]):
        if arg:
            return arg.strftime('%d.%m.%Y %H:%M:%S')
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–≤–Ω–æ"

    title = "üìù **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É–∫–∞–∑–∞–Ω–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:**\n\n"
    
    info = (f"__**–ò–º—è:**__  {convert_none(user_obj.first_name)}\n"
            f"__**–§–∞–º–∏–ª–∏—è:**__  {convert_none(user_obj.last_name)}\n"
            f"__**Username:**__  {convert_none(user_obj.username)}\n"
            f"__**ID:**__  {convert_none(user_obj.id)}\n"
            f"__**–ë–æ—Ç:**__  {convert_bool(user_obj.is_bot)}\n"
            f"__**–ü—Ä–µ–º–∏—É–º –∞–∫–∫–∞—É–Ω—Ç:**__  {convert_bool(user_obj.is_premium)}\n"
            f"__**–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ–Ω–ª–∞–π–Ω:**__  {convert_datetime(user_obj.last_online_date)}\n"
            )
    
    return title + info

                            
