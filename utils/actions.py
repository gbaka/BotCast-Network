from random import randint
from datetime import datetime, timedelta

from pyrogram import Client, errors

from errors.custom_errors import CommandArgumentError, CommandExecutionError
from database.database_manager import DATABASE_MANAGER
from utils.autoposter import AUTOPOSTER
from utils.command_info import COMMAND_INFO
from utils import helpers, telegram_helpers
import config

"""
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è,
–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

"""


async def execute_history_command(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()

    get_histroy_patterns = [(), (int,), ("-s",), ("-s", int)]
    clear_history_pattern = ("clear",)

    patterns = [
        *get_histroy_patterns,
        clear_history_pattern
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern in get_histroy_patterns:
        if used_pattern in [(),  ("-s",)]:
            page = 1
        elif used_pattern == (int,):
            page = int(arguments_list[0])
        elif used_pattern == ("-s", int):
            page = int(arguments_list[1])
        records = list(map(str, DATABASE_MANAGER.history.get_page(page)))
        records = helpers.trim_history_records(records) if used_pattern in [("-s", int), ("-s",)] else records
        res = helpers.create_history_page(page, records)

    elif used_pattern == clear_history_pattern:
        records_count = DATABASE_MANAGER.history.get_record_count() 
        if records_count > 0:
            DATABASE_MANAGER.history.clear()
            res = ("üóëÔ∏è **–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.\n\n**" +
                   f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {records_count} –∑–∞–ø–∏—Å–µ–π.")
        else:
            res = "‚öôÔ∏è **–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞.**" 

    await client.send_message(user_id, res)


async def execute_texts_command(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()

    get_patterns = [(), (int,)]
    add_pattern = ("add", ...)
    del_pattern = ("del", int)
    clear_pattern = ("clear",)
    show_pattern = ("show", int)

    patterns = [
        add_pattern,
        del_pattern,
        clear_pattern,
        show_pattern,
        *get_patterns
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern == add_pattern:
        text = helpers.remove_first_word(command_part)
        DATABASE_MANAGER.texts.add(text)
        res = "‚úÖ **–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.**"

    elif used_pattern == del_pattern:
        text_id = int(arguments_list[1])
        DATABASE_MANAGER.texts.delete(text_id)
        res = "üóëÔ∏è **–¢–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.**"

    elif used_pattern == clear_pattern:
        records_count = DATABASE_MANAGER.texts.get_record_count() 
        if records_count > 0:
            DATABASE_MANAGER.texts.clear()
            res = ("üóëÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n\n**" +
                   f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {records_count} —Ç–µ–∫—Å—Ç–æ–≤.")
        else:
            res = "‚öôÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ –∏ —Ç–∞–∫ –ø—É—Å—Ç.**" 

    elif used_pattern == show_pattern:
        text_id = int(arguments_list[1])
        res = f"üìù **–¢–µ–∫—Å—Ç —Å ID {text_id}:**\n\n"
        res += "\"" + DATABASE_MANAGER.texts.get_text(text_id).text + "\""
        pass

    elif used_pattern in get_patterns:
        page = 1 if used_pattern==() else int(arguments_list[0])
        texts = list(map(str, DATABASE_MANAGER.texts.get_page(page)))
        res = helpers.create_texts_page(page, texts)

    await client.send_message(user_id, res)


async def execute_chats_command(client: Client, user_id: int,  command_part: str) -> None:
    arguments_list = command_part.split()
    
    add_pattern = ("add", str)
    del_pattern = ("del", int)
    get_info_pattern = ("info", str)
    clear_pattern = ("clear",)
    get_patterns = [(), (int,)]

    patterns = [
        add_pattern,
        del_pattern,
        get_info_pattern,
        clear_pattern,
        *get_patterns
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern in [add_pattern, del_pattern, *get_patterns]:
        deleted_chats = await telegram_helpers.chats_refresh(client)
        if deleted_chats:
            error_title = "‚ö†Ô∏è **–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:**"
            report = helpers.create_deleted_chats_report(deleted_chats)
            raise CommandExecutionError(report, error_title)

    if used_pattern==add_pattern:
        # TODO:  –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –æ–±—Ä–±–æ—Ç–∫—É floodwait –Ω–∞ –≤–µ—Ä—Ö–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å 
        chat_link = arguments_list[1]
        api_error = True
        try:
            chat_details = await telegram_helpers.get_chat_details(client,chat_link)
            if not chat_details['is_participant']:
                chat_obj = await client.join_chat(chat_details["chat_link"])

                # TODO: start test block
                try:
                    await telegram_helpers.mute_chat(client, chat_obj.id)
                except:
                    pass
                # end test block

                print("from join_chat: \n", chat_obj)
                print("from process_chat: \n", chat_details)
                DATABASE_MANAGER.chats.add(chat_details["title"], chat_obj.id, chat_details["members_count"] ) 
                res = "‚úÖ **–ë–æ—Ç —Å–º–æ–≥ –≤–æ–π—Ç–∏ –≤ —á–∞—Ç –∏ –¥–æ–±–∞–≤–∏–ª –µ–≥–æ –≤ –±–∞–∑—É.**" 
            else:
                if DATABASE_MANAGER.chats.has_chat(chat_details["id"]): 
                    res = "‚öôÔ∏è **–ë–æ—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.**"
                else: 
                    DATABASE_MANAGER.chats.add(chat_details["title"],  chat_details["id"], chat_details["members_count"])
                    res = "‚úÖ **–ë–æ—Ç –¥–æ–±–∞–≤–∏–ª —á–∞—Ç –≤ –±–∞–∑—É.**"
            api_error = False
            
        except errors.exceptions.flood_420.FloodWait as e:
            error_title = "‚öôÔ∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API.**"
            error_message =("–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É—Å—Ç–∞ " +
                            f"{helpers.extract_wait_time(str(e))} —Å–µ–∫—É–Ω–¥.")
        if api_error:
            raise CommandExecutionError(error_message, error_title)

    elif used_pattern == clear_pattern:
        records_count = DATABASE_MANAGER.chats.get_record_count() 
        if records_count > 0:
            DATABASE_MANAGER.chats.clear()
            res = ("üóëÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n\n**" +
                   f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {records_count} —á–∞—Ç–æ–≤.")
        else:
            res = "‚öôÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ –∏ —Ç–∞–∫ –ø—É—Å—Ç.**" 

    elif used_pattern == del_pattern:
        chat_id = int(arguments_list[1])
        DATABASE_MANAGER.chats.delete(chat_id)
        res = "üóëÔ∏è **–ß–∞—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.**"

    elif used_pattern == get_info_pattern:
        chat_link = arguments_list[1]
        chat_details = await telegram_helpers.get_chat_details(client,chat_link)
        res = helpers.render_chat_info(chat_details)

    elif used_pattern in get_patterns:
        page = 1 if used_pattern==() else int(arguments_list[0])
        chats = list(map(str, DATABASE_MANAGER.chats.get_page(page)))
        res = helpers.create_chats_page(page, chats)
    
    await client.send_message(user_id, res) 


async def execute_messages_command(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()

    schedule_patterns = [
        ("schedule", [int, "-all"], [int, "-random"], int, int, int), 
        ("schedule", [int, "-all"], [int, "-random"], int, int,),
        ("schedule", [int, "-all"], [int, "-random"], int,)
    ]  
    autopost_patterns = [
        ("autopost", [int, "-all"], [int, "-random"], int), 
        ("autopost", [int, "-all"], [int, "-random"])
    ]
    get_patterns = [
        (), (int,)
    ]
    undo_pattern = ("undo", [int, "-all"])
    autopost_status_pattern = ("autopost", "status")
    autopost_stop_pattern = ("autopost", "stop")

    patterns = [
        *schedule_patterns, 
        *get_patterns,
        undo_pattern,
        *autopost_patterns,
        autopost_status_pattern,
        autopost_stop_pattern
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern in [*schedule_patterns, *get_patterns, *autopost_patterns]:
        deleted_chats = await telegram_helpers.chats_refresh(client)
        if deleted_chats:
            error_title = "‚ö†Ô∏è **–° –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç—É —Å—Ç–∞–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —á–∞—Ç—ã:**"
            report = helpers.create_deleted_chats_report(deleted_chats)
            raise CommandExecutionError(report, error_title)
    
    if used_pattern in schedule_patterns:
        if arguments_list[1]=="-all":
            chat_objs = DATABASE_MANAGER.chats.get_chats()
            if len(chat_objs) == 0:
                raise CommandExecutionError("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –≤ –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n `/chats add`",
                                         "‚ö†Ô∏è **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ –ø—É—Å—Ç**")
        else:
            target_chat_id = int(arguments_list[1])
            if not DATABASE_MANAGER.chats.has_chat(target_chat_id):   
                raise CommandExecutionError("–ß—Ç–æ–±—ã –Ω–∞–∑–Ω–∞—á–∞—Ç—å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–∞–∑—É —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n`/chats add`",
                                         "‚ö†Ô∏è **ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.**")
            chat_objs=[DATABASE_MANAGER.chats.get_chat(target_chat_id)] 
        if arguments_list[2]=="-random":
            text_objs = DATABASE_MANAGER.texts.get_texts()
            if len(text_objs) == 0:
                raise CommandExecutionError("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –≤ –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n `/texts add`",
                                         "‚ö†Ô∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç**")
        else:
            text_id = int(arguments_list[2])
            if not DATABASE_MANAGER.texts.has_text(text_id):
                raise CommandExecutionError("–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n `/texts`",
                                         "‚ö†Ô∏è **ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.**")
            text_objs = [DATABASE_MANAGER.texts.get_text(text_id)]

        messages_amount = int(arguments_list[3])
        if messages_amount > 100:
            raise CommandExecutionError("", "‚ö†Ô∏è **–ù–µ–ª—å–∑—è –µ–¥–∏–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–∞–∑–Ω–∞—á–∞—Ç—å –≤ –æ–¥–∏–Ω —á–∞—Ç –±–æ–ª–µ–µ 100 –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.**") 
        if messages_amount < 1:
            raise CommandExecutionError("", "‚ö†Ô∏è **–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ü–µ–ª—ã–º –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.**") 
        time_difference = int(arguments_list[4]) if len(arguments_list) >=5 else config.DELAYED_MESSAGE_TIME_DIFFERENCE
        if time_difference < 1:
            raise CommandExecutionError("", "‚ö†Ô∏è **–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).**")  
        delay = int(arguments_list[5]) if len(arguments_list)>=6 else config.INITIAL_SEND_DELAY
        if delay < 1:
            raise CommandExecutionError("", "‚ö†Ô∏è **–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–æ–ª–∂–Ω–∞ –æ—Ç—Å—Ç–æ—è—Ç—å –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∫–∞–∫ –º–∏–Ω–∏–º—É–º –Ω–∞ –æ–¥–Ω—É –º–∏–Ω—É—Ç—É –≤–ø–µ—Ä–µ–¥**")    
        initial_schedule_date =  datetime.now() + timedelta(minutes=delay)
        schedule_date = initial_schedule_date    

        sent_messages = []
        message_sending_info = []
        all_messages_sent = True

        for chat_obj in chat_objs:
            schedule_date = initial_schedule_date    
            chat_id = chat_obj.chat_id
            chat_title = chat_obj.name
            max_available_delayd_messages = config.MAX_DELAYED_MESSAGES_PER_CHAT - DATABASE_MANAGER.messages.get_message_count_by_chat_id(chat_id)
            iterations = min(messages_amount, max_available_delayd_messages)  
            if iterations < messages_amount:  
                all_messages_sent = False
                if iterations < 0:
                    iterations = 0
         
            sent_messages_per_chat = []
            try:
                for _ in range(iterations):
                    text_obj = text_objs[randint(0, len(text_objs)-1)]
                    text = text_obj.text
                    sent_message = await client.send_message(chat_id=chat_id,text=text,schedule_date=schedule_date)
                    print(f"–Ω–∞–∑–Ω–∞—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {sent_message.id}")
                    print(f"—Å–æ–æ–±—â–µ–Ω–∏–µ:\n", sent_message)
                    sent_messages_per_chat.append(sent_message)
                    schedule_date += timedelta(minutes=time_difference)
            except Exception:
                all_messages_sent = False
            finally:
                sent_messages += sent_messages_per_chat
                amount_sent_messages = len(sent_messages_per_chat)
                message_sending_info.append({
                    "chat_title": chat_title,
                    "chat_id": chat_id, 
                    "messages_amount": amount_sent_messages,
                    "end_of_sending": initial_schedule_date + (amount_sent_messages - 1) * timedelta(minutes=time_difference), 
                })
            
        DATABASE_MANAGER.messages.add_by_telegram_message_list(sent_messages)
        res = helpers.create_delayed_messages_report(message_sending_info, initial_schedule_date, time_difference, all_messages_sent)

    elif used_pattern in get_patterns: 
        records = DATABASE_MANAGER.messages.get_messages_info_by_chats()
        extended_records = []
        for record in records:
            try:
                chat_title = DATABASE_MANAGER.chats.get_name(record[0])
            except CommandArgumentError:
                chat_title = None
            extended_records.append((*record, chat_title))
        if used_pattern == (int,):
            chat_id = int(arguments_list[0])
            if chat_id not in [record[0] for record in records]:
                res = "‚öôÔ∏è **–î–ª—è —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º  ID –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±–µ—â–Ω–∏–π.**"
            else:
                match_record = [extended_record for extended_record in extended_records if extended_record[0]==chat_id]
                res = helpers.render_messages_info(match_record)
        else:
            if len(records)==0:
                res = "‚öôÔ∏è **–û—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.**"
            else:
                res = helpers.render_messages_info(extended_records) 

    elif used_pattern == undo_pattern:
        if arguments_list[1] == "-all":
            delayed_message_ids_by_chat_id = DATABASE_MANAGER.messages.get_all_message_ids_by_chat_id()
            print(delayed_message_ids_by_chat_id)
            chat_amount = len(delayed_message_ids_by_chat_id)
            if chat_amount == 0:
                res = "‚öôÔ∏è **–î–ª—è —á–∞—Ç–æ–≤ –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±–µ—â–Ω–∏–π.**"
            else: 
                total_deleted_messages = 0
                total_delayed_messages = sum([len(delayed_message_ids_by_chat_id[chat_id]) for chat_id in delayed_message_ids_by_chat_id])
                for chat_id in delayed_message_ids_by_chat_id:
                    delayed_message_ids = delayed_message_ids_by_chat_id[chat_id]
                    delayed_message_amount = len(delayed_message_ids)
                    deleted_messages = await telegram_helpers.delete_scheduled_messages(client, chat_id, delayed_message_ids)
                    DATABASE_MANAGER.messages.delete_messages_by_ids(deleted_messages)
                    total_deleted_messages += len(deleted_messages)
                if total_deleted_messages == total_delayed_messages:
                    res = f"‚úÖ **–û—Ç–º–µ–Ω–µ–Ω—ã {total_delayed_messages}/{total_delayed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π.**"
                elif total_deleted_messages == 0:
                    res = (f"‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.**\n\n" + 
                        "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤—Å–µ—Ö —á–∞—Ç–æ–≤.")
                else:
                    res = (
                        f"‚ö†Ô∏è **–ë—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã {total_deleted_messages}/{total_delayed_messages} —Å–æ–æ–±—â–µ–Ω–∏–π.**\n\n" + 
                        "–ë–æ—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —á–∞—Ç–æ–≤."
                    )              
        else:
            chat_id = int(arguments_list[1])
            delayed_message_ids = DATABASE_MANAGER.messages.get_message_ids_by_chat_id(chat_id)
            delayed_message_amount = len(delayed_message_ids)
            if delayed_message_amount == 0:
                res = "‚öôÔ∏è **–î–ª—è —á–∞—Ç–∞ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º  ID –Ω–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–æ–æ–±–µ—â–Ω–∏–π.**"
            else: 
                deleted_messages = await telegram_helpers.delete_scheduled_messages(client, chat_id, delayed_message_ids)
                DATABASE_MANAGER.messages.delete_messages_by_ids(deleted_messages)
                if len(deleted_messages) == delayed_message_amount:
                    res = f"‚úÖ **–û—Ç–º–µ–Ω–µ–Ω—ã {delayed_message_amount}/{delayed_message_amount} —Å–æ–æ–±—â–µ–Ω–∏–π.**"
                elif len(deleted_messages) == 0:
                    res = (f"‚ö†Ô∏è **–°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.**\n\n" + 
                        "–í–æ–∑–º–æ–∂–Ω–æ, –±–æ—Ç –±—ã–ª –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞.")
                else:
                    res = (
                        f"‚ö†Ô∏è **–ë—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã {len(deleted_messages)}/{delayed_message_amount} —Å–æ–æ–±—â–µ–Ω–∏–π.**\n\n" + 
                        "–ë–æ—Ç—É –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ –≤—Ä–µ–º—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω –±—ã–ª –∏—Å–∫–ª—é—á—ë–Ω –∏–∑ —á–∞—Ç–∞."
                    )

    elif used_pattern in autopost_patterns:
        if arguments_list[1]=="-all":
            chat_objs = DATABASE_MANAGER.chats.get_chats()
            if len(chat_objs) == 0:
                raise CommandExecutionError("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç—ã –≤ –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n `/chats add`",
                                         "‚ö†Ô∏è **–ö–∞—Ç–∞–ª–æ–≥ —á–∞—Ç–æ–≤ –ø—É—Å—Ç**")
        else:
            target_chat_id = int(arguments_list[1])
            if not DATABASE_MANAGER.chats.has_chat(target_chat_id):   
                raise CommandExecutionError("–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ –≤ –¥–∞–Ω–Ω—ã–π —á–∞—Ç, –¥–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –±–∞–∑—É —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n `/chats add`",
                                         "‚ö†Ô∏è **ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.**")
            chat_objs=[DATABASE_MANAGER.chats.get_chat(target_chat_id)] 
        if arguments_list[2]=="-random":
            text_objs = DATABASE_MANAGER.texts.get_texts()
            if len(text_objs) == 0:
                raise CommandExecutionError("–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç—ã –≤ –±–∞–∑—É –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\n `/texts add`",
                                         "‚ö†Ô∏è **–ö–∞—Ç–∞–ª–æ–≥ —Ç–µ–∫—Å—Ç–æ–≤ –ø—É—Å—Ç**")
        else:
            text_id = int(arguments_list[2])
            if not DATABASE_MANAGER.texts.has_text(text_id):
                raise CommandExecutionError("–ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å ID –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–æ–π:\n `/texts`",
                                         "‚ö†Ô∏è **ID —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ.**")
            text_objs = [DATABASE_MANAGER.texts.get_text(text_id)]
        time_difference = int(arguments_list[3]) if len(arguments_list)>=4 else config.AUTOPOST_MESSAGE_TIME_DIFFERENCE
        if time_difference < 1:
            raise CommandExecutionError("", "‚ö†Ô∏è **–ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º (–≤ –º–∏–Ω—É—Ç–∞—Ö).**")  
        time_difference = timedelta(minutes=time_difference)
        if AUTOPOSTER.is_active():
            res = "‚ö†Ô∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω.**\n\n–í—ã –º–æ–∂–µ—Ç–µ –æ—Å—Ç–Ω–æ–≤—Ç—å –µ–≥–æ —Å–ª–µ–¥—É—é—â–µ–π –∫–æ–º–∞–Ω–¥–Ω–æ–π:\n `/messages autopost stop`"
        else:
            AUTOPOSTER.start(client, chat_objs, text_objs, time_difference)
            res = helpers.create_autoposting_start_report(chat_objs,text_objs, time_difference)
    
    elif used_pattern == autopost_stop_pattern:
        if not AUTOPOSTER.is_active():
            res = "‚ö†Ô∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.**"
        else:
            status = AUTOPOSTER.stop()
            res = helpers.create_autoposting_end_report(status)     
    
    elif used_pattern == autopost_status_pattern:
        if not AUTOPOSTER.is_active():
            res = "‚ö†Ô∏è **–ê–≤—Ç–æ–ø–æ—Å—Ç–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω.**"
        else:
            status = AUTOPOSTER.get_status()
            res = helpers.create_autoposting_status_report(status)

    await client.send_message(user_id, res)


async def execute_notes_command(client: Client, user_id: int,  command_part: str) -> None:
    arguments_list = command_part.split()
        
    get_patterns = [(), (int,)]
    add_pattern = ("add", ...)
    del_pattern = ("del", int)
    clear_pattern = ("clear",)
    set_descr_pattern = ("setdescr", int, ...)
    
    patterns = [
        add_pattern,
        del_pattern,
        clear_pattern,
        *get_patterns,
        set_descr_pattern
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern == add_pattern:
        note = helpers.remove_first_word(command_part)
        DATABASE_MANAGER.notes.add(note)
        res = "‚úÖ **–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É.**"

    elif used_pattern == del_pattern: 
        note_id = int(arguments_list[1])
        DATABASE_MANAGER.notes.delete(note_id)
        res = "üóëÔ∏è **–ó–∞–º–µ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –±–∞–∑—ã.**"

    elif used_pattern in get_patterns:
        page = 1 if used_pattern==() else int(arguments_list[0])
        notes = list(map(str, DATABASE_MANAGER.notes.get_page(page)))
        res = helpers.create_notes_page(page, notes)

    elif used_pattern == clear_pattern:
        notes_count = DATABASE_MANAGER.notes.get_notes_count()
        if notes_count > 0:
            DATABASE_MANAGER.notes.clear()
            res = ("üóëÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–º–µ—Ç–æ–∫ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω.\n\n**" +
                   f"–ë—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ {notes_count} –∑–∞–º–µ—Ç–æ–∫.")
        else: 
            res =  "‚öôÔ∏è **–ö–∞—Ç–∞–ª–æ–≥ –∑–∞–º–µ—Ç–æ–∫ –∏ —Ç–∞–∫ –ø—É—Å—Ç.**" 

    elif used_pattern == set_descr_pattern:
        note_id = int(arguments_list[1])
        description = helpers.remove_first_n_words(command_part, 2)
        DATABASE_MANAGER.notes.set_description(note_id, description)
        res = "‚úÖ **–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ.**"
    
    await client.send_message(user_id, res)


async def execute_help_command(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()
    
    general_help_pattern = ()
    special_help_pattern = (str,)
  
    patterns = [
        general_help_pattern,
        special_help_pattern
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern == general_help_pattern:
        title = "üìù **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞:**\n\n"
        res = title + COMMAND_INFO["general"]

    elif used_pattern == special_help_pattern:
        section = arguments_list[0]
        if section not in COMMAND_INFO:
            res = "‚ö†Ô∏è **–¢–∞–∫–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞ –∫–æ–º–∞–Ω–¥ –Ω–µ—Ç.**"
        else: 
            title = f"üìù **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Å–µ–∫—Ü–∏–∏ {section}:**\n\n"
            res = title + COMMAND_INFO[section]
    
    await client.send_message(user_id, res)


async def about(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()
    empty_pattern = ()
    patterns = [
        empty_pattern
    ]
    helpers.validate_arguments_against_patterns(arguments_list, patterns)

    bot_info = (
        "BakaposterTG v.1.0"
    )
    try:
        await client.send_message(user_id, bot_info)
    except:
        pass
