from pyrogram import Client, errors
from utils import helpers
from datetime import datetime, timedelta
from errors.custom_errors import CommandArgumentError, CommandExecutionError
from database.database_manager import DATABASE_MANAGER

"""
–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏, –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—â–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è,
–Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

"""
#TODO: –≤–Ω–µ–¥—Ä–∏—Ç—å DatabaseManager'a –≤ –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
#      –≤–æ–∑–º–Ω–æ–∂–Ω–æ –ø—Ä–∏–¥–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ü–∏–∏ can_convert_to_types, 
#      —Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∏–º –∏ —Ç–µ–º –∂–µ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–≥—É—Ç –∑–∞–¥–∞–≤–∞—Ç—å—Å—è –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö

async def join_group_chat(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()
    patterns = [(str,)]
    helpers.validate_arguments_against_patterns(arguments_list, patterns)  # –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏—è
    chat_link = arguments_list[0]
    try:
        await client.join_chat(chat_link)
        await client.send_message(user_id,
                                  "‚úÖ **–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –≤–æ—à–µ–ª –≤ —á–∞—Ç.**"
                                  )
        return

    except errors.bad_request_400.UserAlreadyParticipant:
        await client.send_message(user_id,
                                  "‚ö†Ô∏è **–ü–æ—Ö–æ–∂–µ, –±–æ—Ç —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.**"
                                  )

    except errors.exceptions.flood_420.FloodWait as e:
        error_message = str(e)
        await client.send_message(user_id,
                                  f"‚öôÔ∏è **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Telegram API.**\n\n–ß—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É—Å—Ç–∞ " +
                                  f"{helpers.extract_wait_time(error_message)} —Å–µ–∫—É–Ω–¥."
                                  )

    except errors.exceptions.bad_request_400.InviteHashExpired:
        await client.send_message(user_id,
                                  "‚ùå **–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è —Å—Å—ã–ª–∫–∏ –∏—Å—Ç–µ–∫ –∏–ª–∏ –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–º —á–∞—Ç–µ.**"
                                  )

    except (errors.exceptions.bad_request_400.BadRequest):  # ...BadRequest - —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è –≤—Å–µ—Ö, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –≤—ã—à–µ
        await client.send_message(user_id,
                                  "‚ùå **–°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.**"
                                  )
        
    raise CommandExecutionError("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞") 



async def schedule_message(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()
    patterns = [(int, ...)]
    helpers.validate_arguments_against_patterns(arguments_list, patterns)
    message = helpers.remove_first_word(command_part)
    delay = int(arguments_list[0])
    send_time = datetime.now() + timedelta(seconds=delay)
    await client.send_message(chat_id=user_id,
                              text=message,
                              schedule_date=send_time
                              )
    await client.send_message(chat_id=user_id,
                              text="‚úÖ **–û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ.**"
                              )

async def execute_history_command(client: Client, user_id: int, command_part: str):
    arguments_list = command_part.split()
    
    get_histroy_patterns = [(), (int,), ("-s",), ("-s", int)]
    clear_history_patterns = [("clear",)]
    patterns = [
        *get_histroy_patterns,
        *clear_history_patterns
    ]

    used_pattern = helpers.validate_arguments_against_patterns(arguments_list, patterns)

    if used_pattern in get_histroy_patterns:
        if used_pattern in [(),  ("-s",)]:
            page = 1
        elif used_pattern == (int,):
            page = int(arguments_list[0])
        elif used_pattern == ("-s", int):
            page = int(arguments_list[1])
        records = list(map(str, DATABASE_MANAGER.get_history_page(page)))
        records = helpers.trim_history_records(records) if used_pattern in [("-s", int), ("-s",)] else records
        res = helpers.create_history_page(page, records)

    elif used_pattern in clear_history_patterns:
        records_count = DATABASE_MANAGER.get_history_record_count()
        if records_count > 0:
            DATABASE_MANAGER.clear_history()
            res = "üóëÔ∏è **–ò—Å—Ç–æ—Ä–∏—è —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.**"
        else:
            res = "‚öôÔ∏è  **–ò—Å—Ç–æ—Ä–∏—è –∫–æ–º–∞–Ω–¥ –∏ —Ç–∞–∫ –ø—É—Å—Ç–∞.**" 

    await client.send_message(user_id, res)


async def show_summary(client: Client, user_id: int, command_part: str) -> None:
    arguments_list = command_part.split()
    helpers.can_convert_to_types(arguments_list, ())

    bot_info = (
        "ü§ñ –ú–æ–π –ë–æ—Ç 1.0\n\n"
        "üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n"
        "–ú–æ–π –ë–æ—Ç - —ç—Ç–æ —É–º–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ.\n\n"
        "üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:\n"
        "–ò–º—è: John Doe\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç: john@example.com\n\n"
        "üìö –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:\n"
        "- /start: –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "- /weather <–≥–æ—Ä–æ–¥>: –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ\n"
        "- /help: –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏\n\n"
        "üåê –°—Å—ã–ª–∫–∏:\n"
        "–í–µ–±-—Å–∞–π—Ç: https://www.example.com/bot\n"
        "–¢–≤–∏—Ç—Ç–µ—Ä: @mybot\n\n"
        "¬© 2023 –ú–æ–π –ë–æ—Ç. –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã."
    )
    try:
        await client.send_message(user_id, bot_info)
    except:
        pass
